import { format, getWeekOfMonth, isWeekend } from "date-fns";
import { utcToZonedTime } from "date-fns-tz";
import { Composer } from "grammy";
import { process } from "https://deno.land/std@0.167.0/node/process.ts";
import bot from "./bot.ts";
import { handleLink } from "./extends/functions.ts";
import { shelf_inline, show_keyboard_sch } from "./types/dx.ts";
export const composer = new Composer();

composer.command("schedule", async (ctx) => {
    const date = utcToZonedTime(new Date(), "Europe/Kiev");
    await show_keyboard_sch(ctx, format(date, "EEEE"));
});

composer.command("about", async (ctx) => {
    await ctx.reply(
        "–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–Ω—è—Ç—å —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.\n" +
            "–†–æ–∑—Ä–æ–±–Ω–∏–∫: @voxelin",
    );
});

composer.filter((ctx) => ctx.from?.id == 5187696616).command(
    "botinfo",
    async (ctx) => {
        await ctx.reply(`
<code>@${(await bot.api.getMe()).username}</code> ü§ñ
‚îú <b>Uptime:</b> <code>${Math.round(process.uptime())}sec</code>
‚îú <b>Memory usage:</b> <code>${
            (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2)
        }MB</code>
‚îú <b>Host:</b> <code>deta.sh</code>
‚îú <b>Endpoint:</b> <code>https://endpoint.blackvoxel.space</code>
‚îú <b>Node.js:</b> <code>${process.version}</code>
‚îú <b>Pending endpoint updates:</b> <code>${
            (await bot.api.getWebhookInfo()).pending_update_count - 1
        }</code>
‚îî <b>Commands:</b> <code>${
            Object.getOwnPropertyNames(Object.getPrototypeOf(this)).length
        }</code>`);
    },
);

composer.command("cancel", async (ctx) => {
    await ctx.reply("–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", {
        reply_markup: {
            remove_keyboard: true,
        },
        reply_to_message_id: ctx.message?.message_id,
    });
});

composer.command("link", async (ctx) => {
    const date = utcToZonedTime(new Date(), "Europe/Kiev");
    if (isWeekend(date)) {
        return await ctx.reply("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π ü•≥");
    }
    const _d = await handleLink();
    const { urls, next } = _d;
    let { name } = _d;
    if (Object.keys(_d).length === 0) {
        return ctx.reply("–£—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å, –≤—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ! ü´Ç");
    }
    const oddWeek = getWeekOfMonth(date) % 2;
    switch (name) {
        case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
            if (oddWeek == 0) {
                name = "üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è";
            } else {
                name = "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ";
            }
            break;
        case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
            if (oddWeek == 0) {
                name = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏";
            } else {
                name = "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è";
            }
            break;
        case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
            urls![0] = `1. <a href="${urls![0]}">–ß–µ–ø—É—Ä–Ω–∞</a>\n2. <a href="${
                urls![1]
            }">–î—É–Ω—å–∫–æ</a>`;
            break;
        case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
            urls![0] = `1. <a href="${urls![0]}">–ë–µ–¥–Ω–∞—Ä</a>\n2. <a href="${
                urls![1]
            }">–®–µ—Ä–µ–º–µ—Ç</a>`;
            break;
        default:
            break;
    }
    if (urls?.length != 0) {
        next == true
            ? await ctx.reply(
                `–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫: <b>${name}</b> \n${urls![0]}`,
            )
            : await ctx.reply(`–£—Ä–æ–∫ <b>${name}</b> –≤–∂–µ –ø–æ—á–∞–≤—Å—è: \n${urls![0]}`);
    } else {
        await ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–∞ —É—Ä–æ–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î. ü§î");
    }
});

composer.command("shelf", async (ctx) => {
    await ctx.reply("üìö –û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É:", {
        reply_markup: shelf_inline,
        disable_web_page_preview: true,
        reply_to_message_id: ctx.message?.message_id,
    });
});

composer.command("start", async (ctx) => {
    await ctx.reply("–ü—Ä–∞—Ü—é—é –Ω–∞ –±–ª–∞–≥–æ —É—á–Ω—ñ–≤ –ª—ñ—Ü–µ—é ü§ñ\n–ê–≤—Ç–æ—Ä: @voxelin", {
        parse_mode: "Markdown",
    });
});
