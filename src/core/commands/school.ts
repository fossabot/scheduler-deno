import { format, getWeekOfMonth, isWeekend } from "date-fns";
import { utcToZonedTime } from "date-fns-tz";
import { Composer } from "grammy";
import { handleLink } from "../extends/functions.ts";
import { show_schedule_keyboard } from "../handlers/dx.ts";

export const school_commands_composer = new Composer();
const zonedTime = utcToZonedTime(new Date(), "Europe/Kiev");

school_commands_composer.command("schedule", async (ctx) => {
    await show_schedule_keyboard(ctx, format(zonedTime, "EEEE"));
});

school_commands_composer.command("link", async (ctx) => {
    if (isWeekend(zonedTime)) {
        return await ctx.reply("–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π ü•≥");
    }
    const raw_data = handleLink();
    const { links, next } = raw_data;
    let { name } = raw_data;
    if (Object.keys(raw_data).length === 0) {
        return ctx.reply("–£—Ä–æ–∫–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å, –≤—ñ–¥–ø–æ—á–∏–≤–∞–π—Ç–µ! ü´Ç");
    }
    const oddWeek = getWeekOfMonth(zonedTime) % 2;
    switch (name) {
        case "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ | üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è":
            if (oddWeek == 0) {
                name = "üìú –û—Å–Ω–æ–≤–∏ –∑–¥–æ—Ä–æ–≤'—è";
            } else {
                name = "üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ";
            }
            break;
        case "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è | üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏":
            if (oddWeek == 0) {
                name = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏";
            } else {
                name = "üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è";
            }
            break;
        case "üìö –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞":
            links![0] = `1. <a href="${links![0]}">–ß–µ–ø—É—Ä–Ω–∞</a>\n2. <a href="${
                links![1]
            }">–î—É–Ω—å–∫–æ</a>`;
            break;
        case "üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞":
            links![0] = `1. <a href="${links![0]}">–ë–µ–¥–Ω–∞—Ä</a>\n2. <a href="${
                links![1]
            }">–®–µ—Ä–µ–º–µ—Ç</a>`;
            break;
        default:
            break;
    }
    if (links?.length != 0) {
        next == true
            ? await ctx.reply(
                `–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫: <b>${name}</b> \n${links![0]}`,
            )
            : await ctx.reply(
                `–£—Ä–æ–∫ <b>${name}</b> –≤–∂–µ –ø–æ—á–∞–≤—Å—è: \n${links![0]}`,
            );
    } else {
        await ctx.reply("–ù–∞ –∂–∞–ª—å, –Ω–∞ —É—Ä–æ–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î. ü§î");
    }
});

school_commands_composer.on("callback_query", async (ctx) => {
    const day = ctx.callbackQuery.data ?? "Monday";
    await ctx.answerCallbackQuery();
    await show_schedule_keyboard(ctx, day, false);
});
